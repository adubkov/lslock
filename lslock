#!/usr/bin/env python

import fnmatch
import os
import sys

class FlockList(object):
    """ Print list of files locked with flock """

    def __init__(self, path):
        self.metadata = {}
        self.readFilesStat(path, '*.lock')
        self.readLockFile('/proc/locks')

    def readFilesStat(self, basedir, pattern):
        """ Read inode for all files in basedir, which match a pattern """
        for root, dirs, files in os.walk(basedir):
            for file_ in fnmatch.filter(files, pattern):
                filename = os.path.join(root, file_)
                inode = os.stat(filename).st_ino
                self.metadata.update({inode: {'file': filename}})

    def readLockFile(self, filename):
        """ Loads pid and inode from /proc/locks """
        with open(filename, 'r') as f:
            for line in f.readlines():
                metadata = line.split(' ')
                metadata = filter(lambda x: x, metadata)

                if len(metadata) < 7:
                    raise Exception("Wrong /proc/locks format")

                pid = metadata[4]
                inode = int(metadata[5].split(':')[-1])

                # Ignore records for other files
                if inode in self.metadata:
                    self.metadata[inode].update({'pid': pid})

    def __repr__(self):
        result = []
        for i, v in self.metadata.iteritems():
            result.append('{p}\t{f}'.format(p=v.get('pid'), f=v.get('file')))
        return '\n'.join(result)


def main():
    if len(sys.argv) < 2
        sys.exit("Usage: lslock <directory>")

    # Make instalce of FlockList class
    fl = FlockList(sys.argv[1])

    print(fl)

if __name__ == '__main__':
    main()
